/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import net.kyori.adventure.nbt.*;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.stream.Stream;

public class App {

    public static void main(String[] args) throws IOException {

        var inputDirectory = Paths.get("in").toAbsolutePath();
        var outputDirectory = Paths.get("out").toAbsolutePath();
        inputDirectory.toFile().mkdirs();
        outputDirectory.toFile().mkdirs();

        System.out.println("Scanning " + inputDirectory + " for structure files.");
        try (Stream<Path> stream = Files.walk(inputDirectory)) {
            stream.filter(
                Files::isRegularFile
            ).forEach(path -> {
                System.out.println(path);
                try {
                    var tag = BinaryTagIO.readCompressedPath(path);
                    var blocksList = tag.getList("blocks");
                    var newBlocksList = ListBinaryTag.builder();
                    blocksList.stream().forEach(
                        blockEntry -> {
                                var nbtTag = (CompoundBinaryTag) ((CompoundBinaryTag) blockEntry).get("nbt");
                                if (nbtTag != null && nbtTag.getString("id").equals("minecraft:jigsaw")) {
                                    var name = nbtTag.getString("name");
                                    var target = nbtTag.getString("target");
                                    System.out.println("Swapping name: " + name + " and target: " + target);
                                    nbtTag = nbtTag.putString("name", target).putString("target", name);
                                    newBlocksList.add(
                                        ((CompoundBinaryTag) blockEntry).put("nbt", nbtTag)
                                    );
                                } else {
                                    newBlocksList.add(blockEntry);
                                }
                        }
                    );
                    var newStructure = tag.put("blocks", newBlocksList.build());
                    var relPath =inputDirectory.relativize(path);
                    var outPath = outputDirectory.resolve(relPath);
                    outPath.getParent().toFile().mkdirs();

                    BinaryTagIO.writeCompressedPath(newStructure, outPath);

                    System.out.println();
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            });
        }


//        System.out.println(Paths.get("in").toAbsolutePath());

    }
}
